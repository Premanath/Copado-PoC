<apex:page controller="vlocity_cmt.EPCAdminController" title="Product Admin" showHeader="false" sidebar="false" standardStylesheets="false" docType="html-5.0">
	<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ng="http://angularjs.org" ng-app="productadmin">
		<head>
			<base href="/"/>
            <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.slds, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />
            <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.ProductAdminCss)}" />

            <script type="text/javascript" src="{!URLFOR($Resource.JQUERYJS)}"/>
            <script type="text/javascript" src="/support/console/31.0/integration.js"/>
            <script type="text/javascript" src="{!URLFOR($Resource.vlocity_assets, '/javascripts/vlocity.js')}"/>
            <script type="text/javascript" src="{!URLFOR($Resource.SldsAngular)}"></script>
            <script type="text/javascript" src="{!URLFOR($Resource.AngularRoute)}"/>
            <script type="text/javascript" src="{!URLFOR($Resource.ProductAdmin)}"/>
		</head>
		<body class="via-slds ng-cloak" ng-controller="ProductAdminController">
			<div id="entity-info">
                <div class="slds-clearfix">
                    <div class="entity-menu slds-float--left">
                        <a href="javascript:void(0)" ng-click="toggleMenu()"><span class="glyphicon icon-v-menu"></span></a>
                    </div>
                    <div class="entity-name slds-float--left">
                        <h1 class="slds-text-heading--medium">{{productName}}</h1>
                    </div>
                    <div class="entity-context slds-float--right">
                        <button class="slds-button slds-button--icon-border-filled" ng-click="init()">
                            <slds-button-svg-icon sprite="'utility'" size="'small'" icon="'refresh'"></slds-button-svg-icon>
                            <span class="slds-assistive-text">Refresh</span>
                        </button>
                    </div>
                </div>
            </div>
            <div id="content-container" class="clearfix">
                <div class="entity" ng-show="showMenu"></div>
                <div class="facets">
                    <ul class="facet-sections">
                        <li ng-repeat="facet in facets" ng-class="{'active': facet.active}"><a href="javascript:void(0)" ng-click="gotoFacet(facet)">{{facet.facetObj.Name}}</a></li>
                    </ul>
                </div>
                <div ng-class="{'facet-content': true, 'minimized': showGlobalContext}">
                    <div class="facet-container clearfix">
                        <div ng-class="{'facet-master': true, 'minimized': showFacetDetail ,'collapsed':collapseFacetHeader}">
                            <div ng-repeat="facet in facets" class="vloc-facet" id="{{'facet-'+facet.facetObj.Id}}" ng-if="facet.active">
                                <h2 class="slds-text-heading--small">{{facet.facetObj.Name}}</h2>
                                <section ng-class="{'vloc-section': true, 'vloc-section-form': !facet.hasSectionCustomView}" ng-repeat="section in facet.sections">
                                    <h3 class="slds-text-heading--label" ng-if="!facet.hasSectionCustomView">{{section.sectionObj.Name}}</h3>
                                    <div class="vloc-section-body">
                                        <vloc-custom-view ng-if="section.hasCustomView" ng-init="setupViewAttrs(section)"></vloc-custom-view>
                                        <div ng-if="!section.hasCustomView" ng-repeat="sectionEl in section.sectionElements">
                                            <div ng-switch="sectionEl[nsp+'Type__c']">
                                                <div ng-switch-when="Field" class="vloc-section-element" ng-init="fieldName = sectionEl[nsp+'FieldApiName__c']; fieldName = (fieldName.endsWith('__c') ? nsp+fieldName : fieldName);">
                                                    <div class="el__label"><label for="{{objectFields[fieldName].label}}">{{sectionEl.Name}}</label></div>
                                                    <div class="el__control">
                                                        <vloc-obj-field display-mode="'edit'" parent-obj="editProduct" field-name="fieldName" field-info="objectFields[fieldName]" obj-picklists="objectPicklists[fieldName.toLowerCase()]"></vloc-obj-field>
                                                    </div>
                                                    <div class="el__attr-details"></div>
                                                </div>
                                                <div ng-switch-when="Attribute" class="vloc-section-element" ng-init="attrId = sectionEl[nsp+'AttributeId__c']">
                                                    <div class="el__label"><label for="attr_{{attrId}}">{{sectionEl.Name}}</label></div>
                                                    <div class="el__control">
                                                        <vloc-attribute attribute-id="attrId" object-id="productId" attr-map="attrMap" attr-obj="attrObjMap[attrId]" attr-assgn-obj="attrAssgnObjMap[attrId]" picklist-items="null" lookup-items="null"></vloc-attribute>
                                                    </div>
                                                    <div class="el__attr-details"><a href="#" ng-click="showAttributeMetadata(attrId)">Details</a></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </section>
                                <div ng-if="(facet.sections.length > 0 && !facet.hasSectionCustomView)" class="vloc-section-form slds-text-align--right section-el-btn">
                                    <button type="button" class="slds-button slds-button--brand" ng-click="saveItem($event)">Save</button>
                                </div>
                            </div>
                        </div>
                        <div ng-class="{'facet-detail': true, 'collapsed':collapseFacetHeader}" ng-show="showFacetDetail">
                            <div class="slds-m-bottom--small slds-m-top--small">
                                <div class="slds-button-group slds-grid slds-grid--align-end" role="group">
                                    <button class="slds-button slds-button--icon-border" title="Resize Pane" ng-click="toggleFacetHeader(); $event.stopPropagation();">
                                        <slds-button-svg-icon sprite="'utility'" size="'small'" icon="'expand_alt'"></slds-button-svg-icon>
                                        <span class="slds-assistive-text">Resize Pane</span>
                                    </button>
                                    <button class="slds-button slds-button--icon-border" title="Close Pane" ng-click="closeFacetDetails()">
                                        <slds-button-svg-icon sprite="'utility'" size="'small'" icon="'close'"></slds-button-svg-icon>
                                        <span class="slds-assistive-text">Close Pane</span>
                                    </button>
                                </div>
                            </div>
                            <div id="facet-detail-content"></div>
                        </div>
                    </div>
                </div>
                <div class="global-context" ng-show="showGlobalContext">
                    Global Contexts here..
                </div>
            </div>

			<script>
				j$ = jQuery.noConflict();
                var currencySymbol = '{!currencyLocaleSymbol}';
                var sfBaseUrl = '{!sfBaseUrl}';

                var remoteActions = {
                    getObjectLayoutByName: {
                        action: "{!$RemoteAction.EPCAdminController.getObjectLayoutByName}",
                        config: {escape: false}
                    },
					getObjectLayoutById: {
						action: "{!$RemoteAction.EPCAdminController.getObjectLayoutById}",
						config: {escape: false}
					},
                    getObject: {
                        action: "{!$RemoteAction.EPCAdminController.getObject}",
                        config: {escape: false}
                    },
                    getObjectPicklistsByName: {
                        action: "{!$RemoteAction.EPCAdminController.getObjectPicklistsByName}",
                        config: {escape: false}
                    },
                    describeObjectbyId: {
                        action: "{!$RemoteAction.EPCAdminController.describeObjectbyId}",
                        config: {escape: false}
                    },
                    describeObject: {
                        action: "{!$RemoteAction.EPCAdminController.describeObject}",
                        config: {escape: false}
                    },
                    describeObjectFieldsById: {
                        action: "{!$RemoteAction.EPCAdminController.describeObjectFieldsById}",
                        config: {escape: false}
                    },
                    describeObjectWithQuery: {
                        action: "{!$RemoteAction.EPCAdminController.describeObjectWithQuery}",
                        config: {escape: false}
                    },
                    getAttachments: {
                        action: "{!$RemoteAction.EPCAdminController.getAttachments}",
                        config: {escape: false}
                    },
                    getFieldSets: {
                        action: "{!$RemoteAction.EPCAdminController.getFieldSets}",
                        config: {escape: false}
                    },
                    getFieldSetsByName: {
                        action: "{!$RemoteAction.EPCAdminController.getFieldSetsByName}",
                        config: {escape: false}
                    },
                    createObject: {
                        action: "{!$RemoteAction.EPCAdminController.createObject}",
                        config: {escape: false}
                    },
                    updateObject: {
                        action: "{!$RemoteAction.EPCAdminController.updateObject}",
                        config: {escape: false}
                    },
                    deleteObject: {
                        action: "{!$RemoteAction.EPCAdminController.deleteObject}",
                        config: {escape: false}
                    },
                    getAssignedAttributes: {
                        action: "{!$RemoteAction.EPCAdminController.getAssignedAttributes}",
                        config: {escape: false}
                    },
                    getAppliedAttributesFields: {
                        action: "{!$RemoteAction.EPCAdminController.getAppliedAttributesFields}",
                        config: {escape: false}
                    },
                    getAttributeFieldBindingData: {
                        action: "{!$RemoteAction.EPCAdminController.getAttributeFieldBindingData2}",
                        config: {escape: false}
                    },
                    applyFieldAttribute: {
                        action: "{!$RemoteAction.EPCAdminController.applyFieldAttribute}",
                        config: {escape: false}
                    },
                    unapplyFieldAttribute: {
                        action: "{!$RemoteAction.EPCAdminController.unapplyFieldAttribute}",
                        config: {escape: false}
                    },
                    describeField: {
                        action: "{!$RemoteAction.EPCAdminController.describeField}",
                        config: {escape: false}
                    },
                    createAttributeAssignment: {
                        action: "{!$RemoteAction.EPCAdminController.createAttributeAssignment}",
                        config: {escape: false}
                    },
                    saveAttributeAssignment: {
                        action: "{!$RemoteAction.EPCAdminController.saveAttributeAssignment}",
                        config: {escape: false}
                    },
                    getAttributeAssignmentById: {
                        action: "{!$RemoteAction.EPCAdminController.getAttributeAssignmentById}",
                        config: {escape: false}
                    },
                    getProdStructureItems: {
                        action: "{!$RemoteAction.EPCAdminController.getProdStructureItems}",
                        config: {escape: false}
                    },
                    publishProduct: {
                        action: "{!$RemoteAction.EPCAdminController.publishProduct}",
                        config: {escape: false}
                    },
                    getOfferPricingComponentDefinition: {
                        action: "{!$RemoteAction.EPCAdminController.getOfferPricingComponentDefinition}",
                        config: {escape: false}
                    },
                    getOfferPricingComponentDefinitionByContext: {
                        action: "{!$RemoteAction.EPCAdminController.getOfferPricingComponentDefinitionByContext}",
                        config: {escape: false}
                    },
                    getOverride: {
                        action: "{!$RemoteAction.EPCAdminController.getOverride}",
                        config: {escape: false}
                    },
                    createOverride: {
                        action: "{!$RemoteAction.EPCAdminController.createOverride}",
                        config: {escape: false}
                    },
                    saveOverride: {
                        action: "{!$RemoteAction.EPCAdminController.saveOverride}",
                        config: {escape: false}
                    },
                    deleteOverride: {
                        action: "{!$RemoteAction.EPCAdminController.deleteOverride}",
                        config: {escape: false}
                    },
                    getContextCriteria: {
                        action: "{!$RemoteAction.EPCAdminController.getContextCriteria}",
                        config: {escape: false}
                    },
                    getPricingElementDefinitionByContext: {
                        action: "{!$RemoteAction.EPCAdminController.getPricingElementDefinitionByContext}",
                        config: {escape: false}
                    },
                    getObjectTypes: {
                        action: "{!$RemoteAction.EPCAdminController.getObjectClassTypesByName}",
                        config: {escape: false}
                    },
                    searchObjectFields: {
                        action: "{!$RemoteAction.EPCAdminController.searchObjectFields}",
                        config: {escape: false}
                    },
                    getAvailablePricingVariableElements: {
                        action: "{!$RemoteAction.EPCAdminController.getAvailablePricingVariableElements}",
                        config: {escape: false}
                    },
                    getPricingElements: {
                        action: "{!$RemoteAction.EPCAdminController.getPricingElements}",
                        config: {escape: false}
                    }
                };

                var SLDSICON = {
                    'ADD': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#add")}',
                    'NEW': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#new")}',
                    'EDIT': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#edit")}',
                    'PREVIEW': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#preview")}',
                    'DELETE': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#delete")}',
                    'SEARCH': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#search")}',
                    'CLOSE': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#close")}',
                    'CHEVRON_RIGHT': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#chevronright")}',
                    'CHEVRON_LEFT': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#chevronleft")}',
                    'CHEVRON_DOWN': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#chevrondown")}',
                    'LINK': '{!URLFOR($Resource.slds, "/assets/icons/utility-sprite/svg/symbols.svg#link")}'
                };
			</script>
		</body>
	</html>
</apex:page>