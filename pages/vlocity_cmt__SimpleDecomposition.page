<apex:page docType="html-5.0" applyBodyTag="false" standardController="Order" extensions="vlocity_cmt.SimpleDecompositionController">
<html ng-app="decomposeApp">
<head>
	<title>Decompose Order</title>
	<apex:includeScript value="/soap/ajax/31.0/connection.js" />
	<apex:stylesheet value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/css/vlocity.css')}"/>
	<apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/javascripts/vlocity.js')}"/>
	<apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__XOMNodeView)}" />
	<apex:stylesheet value="{!$Resource.vlocity_cmt__XOMCss}"/>
	<style type="text/css">
		[ng\:cloak], [ng-cloak], .ng-cloak {
			display: none !important;
		}
		
		.vlocity .vlc-overlay {
			position: fixed;
			z-index: 1038;
			background-color: rgba(255, 255, 255, 0.9);
			width: 100%;
			height: 100%; }
			.vlocity .vlc-overlay .spinner {
				position: fixed;
				top: 50%;
				left: 50%;
				margin-top: -14px;
				margin-left: -14px; 
			}
			.modal-body p {
				word-wrap: break-word;
			}
			.modal-backdrop, .am-fade {
				display: none;
			}

		</style>
	</head>
	<body>
		<div class="vlocity" ng-controller="SimpleDecompositionController">
				<div ng-show="showSpinner" class="vlc-overlay">
					<div class="spinner"></div>
				</div>
				<div class="container-fluid">
					<div class="row">
						<div class="col-xs-12 actions">
							<a class="submit-button" 
							ng-click="startOrchestrationPlan()"><i class="icon icon-v-play"></i><span>Start Orchestration Plan</span></a>
						</div>
					</div>
					<div class="row">
						<div class="col-xs-6">
							<h1>Source orders</h1>
		                  	<node-view parent="originalOrders"></node-view>
						</div>
						<div class="col-xs-6">
							<h1>Decomposed Fulfilment Requests</h1>
		                  	<node-view parent="fulfilmentRequests"></node-view>
						</div>

					</div>
				</div>

				<apex:includeScript value="/support/console/31.0/integration.js"/>
			 <apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/bower_components/forceng/forceng.js')}"/>
			 <apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/bower_components/ForceTK/forcetk.js')}"/>
			 <apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__AngularStrapJS_2_3_6)}"/>
			 <apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__AngularStrapTplJS_2_3_6)}"/>
			 <apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__Jquery, 'jquery-1.8.2.min.js')}"/>
			 <apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__Jquery, '/ui/jquery-ui-1.9.1.custom.min.js')}"/>
			 <script type="text/javascript">
				$(document).ready(function(){
					$('[data-toggle="tooltip"]').tooltip(); 
				});
			 	(function () {
			 		'use strict';
			 		var app = angular.module('decomposeApp', ["vlocity", "ngSanitize", "forceng","mgcrea.ngStrap",'ngAnimate', 'vloc.xomNodeView']);
				//config data...
				app.value('configData',{
					orderId : '{!$CurrentPage.parameters.Id}'
				});

				var remoteActions = {
					decomposeOrder : {action: '{!$RemoteAction.SimpleDecompositionController.decomposeOrder}', config: {escape: false}},
					startOrchestrationPlan : '{!$RemoteAction.SimpleDecompositionController.startOrchestrationPlan}'
				};

				app.config(["remoteActionsProvider", function(remoteActionsProvider){
				        remoteActionsProvider.setRemoteActions(remoteActions); // configure the remoteActionsProvider
				    }]);

				app.controller('SimpleDecompositionController', function($scope,$rootScope, $templateCache, $q, $modal, $interpolate,$http, $sce, remoteActions, configData) {

					$scope.showSpinner = true;
					$scope.originalOrders = {
						nodes: []
					};

					$scope.fulfilmentRequests = {
						nodes: []
					};

					$scope.fetchOrders = function () {
						$scope.showSpinner = true;
						remoteActions.decomposeOrder(configData.orderId).then(function(orders) {
							
				            function expandAll (node) {

				                // console.log ('Expanding', node);

				                node.activeNodes = [];

				                // console.log ('Reset active nodes', node);
				                // 
				                // console.log ('Node nodes', node.nodes);

				                if (node.nodes) {
				                  for (var i = 0; i < node.nodes.length; i++) {
				                    // console.log ('Pushing ', i, 'into', node);
				                    node.activeNodes.push(i);
				                    expandAll (node.nodes[i]);
				                  }
				                }

				                // console.log ('Expanded', node, node.activeNodes);

				                return node;

				            }

//							console.log ('Orders', orders);
							if(orders.sucCode == 0){
								$scope.loaded = true;
								$scope.originalOrders = {
									nodes: orders.originalOrders.nodes,
									activeNodes: []
								};

								expandAll ($scope.originalOrders);
								
								$scope.fulfilmentRequests = {
									nodes: (orders.fulfilmentRequests && orders.fulfilmentRequests.nodes ) ? orders.fulfilmentRequests.nodes : [],
									activeNodes: []
								};
								
								//Fix for 649: sort $scope.fulfilmentRequests.nodes by name
								$scope.mySort = function(a, b){return a.name - b.name};
								$scope.fulfilmentRequests.nodes = ($scope.fulfilmentRequests && $scope.fulfilmentRequests.nodes) ? $scope.fulfilmentRequests.nodes.sort($scope.mySort):$scope.fulfilmentRequests.nodes;
								
								expandAll ($scope.fulfilmentRequests);

								$scope.debugMode = orders.debugMode;
								$scope.showSpinner = false;
							}else{
								$scope.loaded = false;
								$modal({title: 'XOM Decomposition Error', content: orders.message, show: true, backdrop : 'false'});
							}
//							console.log ('Scope', $scope);
						});

					};

					$scope.startOrchestrationPlan = function () {
						$scope.showSpinner = true;
						remoteActions.startOrchestrationPlan(configData.orderId).then(function(planId) {
							window.location="/"+planId;
							$scope.showSpinner = false;
						});
					}

					$scope.fetchOrders();

				});

				app.run(["$sce","$templateCache","$rootScope","force", function($sce, $templateCache, $rootScope, force){
//					console.log('inside run');

					force.init({
						accessToken: '{!$Api.Session_ID}',
						useProxy: false
					});

					$rootScope.forcetkClient = new forcetk.Client();
					$rootScope.forcetkClient.setSessionToken('{!$Api.Session_ID}');

				}]);

			})();

		</script>

	</div>


</body>
</html>	

</apex:page>